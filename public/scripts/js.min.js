/**
 * Created by ruslan on 11.08.16.
 */
(function () {
  var c = [], g = React.createClass({
    displayName: "HtmlElementClassDoneAll", g: function () {
      return React.createElement("em", {id: "doneAll", className: "glyphicon glyphicon-ok", a: this.c.a})
    }
  }), h = React.createClass({
    displayName: "ListClassDown", g: function () {
      return React.createElement("li", {id: "down_li"}, React.createElement("div", {className: "col-md-12"},
        React.createElement("span", {id: "item_left"}, 1 < this.c.count ? this.c.count + " items left" :
        this.c.count + " item left"), React.createElement("span", {
        className: "filter activeThis",
        id: "all",
        a: this.c.a
      }, "All"), React.createElement("span", {
        className: "filter",
        id: "active",
        a: this.c.a
      }, "Active"), React.createElement("span", {
        className: "filter",
        id: "completed",
        a: this.c.a
      }, "Completed"), React.createElement("span", {id: "ClearCompleted", a: this.c.D}, "ClearCompleted")))
    }
  }), k = React.createClass({
    displayName: "ListClassElementList", g: function () {
      var a = this.c, b = a.text.map(function (b, c) {
        return React.createElement("li", {className: "elementList " + b.active}, React.createElement("div",
          {className: "col-md-12 "}, React.createElement("span", {
          className: "done",
          "data-reactid": c,
          a: a.F
        }), React.createElement("span", {className: "textItem"}, b.j), React.createElement("span", {
          className: "close glyphicon glyphicon-remove",
          "data-reactid": c,
          a: a.G
        })))
      });
      return React.createElement("ul", {id: "itemList"}, b)
    }
  }), l = React.createClass({
    displayName: "TodoApp", J: function () {
      return {C: [{j: "", active: ""}], count: 0, b: [], filter: "all"}
    }, I: function () {
      0 < this.state.b.length ? $("#ClearCompleted").show() : $("#ClearCompleted").m();
      0 === this.state.count ? $("#doneAll").s("color", "#999999") : $("#doneAll").s("color",
        "#D6D6D6");
      this.l()
    }, f: function () {
      this.state.count = c.length - this.state.b.length;
      this.h({count: this.state.count})
    }, B: function (a) {
      if (13 === a.keyCode) {
        a.preventDefault();
        var b = a.target.value;
        if ("" !== b)return c.push({j: b, active: ""}), this.h({j: ""}), this.f(), a.target.value = ""
      }
    }, v: function (a) {
      var b = a.target.attributes.getNamedItem("data-reactid").value;
      a = c[b];
      "completed" === c[b].active ? (this.state.b.splice(0, 1), b = "") : (this.state.b.push("active"), b = "completed");
      a.active = b;
      this.h({active: ""});
      this.f()
    }, l: function () {
      function a(a,
                 b, d) {
        a = document.querySelectorAll(a);
        var c = document.querySelectorAll(b);
        $("#" + d).H("activeThis");
        var e;
        d = 0;
        for (e = a.length; d < e; d++)$(a[d]).m();
        d = 0;
        for (e = c.length; d < e; d++)$(c[d]).show();
        if (null === b) {
          c = document.querySelectorAll(".elementList");
          d = 0;
          for (e = c.length; d < e; d++)$(c[d]).show();
          d = 0;
          for (e = a.length; d < e; d++)$(a[d]).m()
        }
      }

      var b = this.state.filter;
      $(".activeThis").L("activeThis");
      switch (b) {
        case "active":
          a(".completed", null, b);
          break;
        case "completed":
          a(".elementList", ".completed", b);
          break;
        default:
          a(null,
            ".elementList", b)
      }
    }, A: function (a) {
      this.state.filter = a.target.attributes.getNamedItem("id").value;
      this.l()
    }, u: function (a) {
      a = a.target.attributes.getNamedItem("data-reactid").value;
      "" !== c[a].active && this.state.b.splice(0, 1);
      c.splice(a, 1);
      this.f()
    }, w: function () {
      var a = this;
      c.map(function (b) {
        if (0 !== a.state.count) {
          if ("completed" !== b.active) {
            var c;
            "completed" === b.active ? (a.state.b.splice(0, 1), c = "") : (a.state.b.push("active"), c = "completed");
            b.active = c
          }
        } else b.active = "", a.state.b.splice(0, 1)
      });
      this.h({active: ""});
      this.f()
    }, o: function () {
      c = c.filter(function (a) {
        return "" === a.active
      });
      this.h({C: "", b: []});
      this.f()
    }, g: function () {
      var a, b, f;
      c.length && (b = React.createElement(g, {a: this.w}), a = React.createElement(k, {
        text: c,
        F: this.v,
        G: this.u
      }), f = React.createElement(h, {count: this.state.count, a: this.A, D: this.o}));
      return React.createElement("div", {className: "container"}, React.createElement("div", {className: "row"},
        React.createElement("div", {className: "col-md-4"}), React.createElement("div", {className: "col-md-4"},
          React.createElement("h1",
        null, "todos"), React.createElement("form", {
        action: "",
        id: "inputForm"
      }, b, React.createElement("input", {
        type: "text",
        className: "form-control",
        placeholder: "What needs to be done?",
        K: this.B
      }), a, f)), React.createElement("div", {className: "col-md-4"})))
    }
  });
  ReactDOM.g(React.createElement(l, null), document.getElementById("todoapp"))
})();
